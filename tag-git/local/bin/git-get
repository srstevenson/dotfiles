#!/usr/bin/env python3

from __future__ import annotations

import argparse
import subprocess
from dataclasses import dataclass
from pathlib import Path
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from collections.abc import Iterable


@dataclass
class Args(argparse.Namespace):
    url: str = ""


def expand_url(url: str) -> str:
    if url.startswith(("https://", "git@")):
        return url

    if "/" not in url:
        return f"git@github.com:srstevenson/{url}.git"

    head, tail = url.split("/", maxsplit=1)

    if "." in head:
        # Assume `head` is a hostname if it contains `.`.
        return f"https://{head}/{tail}"

    if head == "srstevenson":
        return f"git@github.com:srstevenson/{tail}.git"

    return f"https://github.com/{url}.git"


def parse_args() -> Args:
    parser = argparse.ArgumentParser(description="Clone Git repository into ~/dev")
    parser.add_argument(
        "url",
        type=expand_url,
        help="repository URL or GitHub shorthand (`project` or `user/project`)",
    )
    return parser.parse_args(namespace=Args())


def matches_hosts(url: str, hosts: Iterable[str]) -> bool:
    return any(
        url.startswith(prefix)
        for host in hosts
        for prefix in (f"https://{host}/", f"git@{host}:")
    )


def unpack_host_and_path(url: str) -> tuple[str, str]:
    if "@" in url:
        host, repo = url.split("@", maxsplit=1)[1].split(":", maxsplit=1)
    else:
        host, repo = url.removeprefix("https://").split("/", maxsplit=1)

    return host, repo.lstrip("~").removesuffix(".git")


def main() -> None:
    args = parse_args()

    host, path = unpack_host_and_path(args.url)
    url = args.url

    if path.startswith("srstevenson/"):
        if host in ["codeberg.org", "github.com", "gitlab.com"]:
            url = f"git@{host}:{path}.git"
        elif host == "git.sr.ht":
            url = f"git@{host}:~{path}"
    elif matches_hosts(args.url, ["codeberg.org", "github.com", "gitlab.com"]):
        if not args.url.startswith("git@"):
            url = f"https://{host}/{path}.git"
    elif matches_hosts(args.url, ["git.sr.ht"]) and not args.url.startswith("git@"):
        url = f"https://{host}/~{path}"

    subprocess.run(
        ["git", "clone", url, Path.home().joinpath("dev", host, path)], check=False
    )


if __name__ == "__main__":
    main()
