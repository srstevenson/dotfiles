#!/usr/bin/env python3

import argparse
import os.path
import subprocess


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Clone Git repository into local source tree."
    )
    parser.add_argument("remote", help="remote repository URL")
    forge = parser.add_mutually_exclusive_group()
    forge.add_argument("-b", "--bitbucket", action="store_true")
    forge.add_argument("-c", "--codeberg", action="store_true")
    forge.add_argument("-l", "--gitlab", action="store_true")
    forge.add_argument("-s", "--sourcehut", action="store_true")
    return parser.parse_args()


def matches_host(remote: str, host: str) -> bool:
    return remote.startswith(f"https://{host}/") or remote.startswith(f"git@{host}:")


def split_remote(remote: str, host: str) -> tuple[str, str, str]:
    slug = (
        remote.removeprefix(f"https://{host}/")
        .removeprefix(f"git@{host}:")
        .removesuffix(".git")
    )
    owner, project = (
        slug.split("/", maxsplit=1) if "/" in slug else ("srstevenson", slug)
    )
    return host, owner.removeprefix("~"), project


def main() -> None:
    args = parse_args()

    if args.bitbucket or matches_host(args.remote, "bitbucket.org"):
        host, owner, project = split_remote(args.remote, "bitbucket.org")
        remote = f"https://{host}/{owner}/{project}.git"
    elif args.codeberg or matches_host(args.remote, "codeberg.org"):
        host, owner, project = split_remote(args.remote, "codeberg.org")
        remote = f"git@{host}:{owner}/{project}.git"
    elif args.gitlab or matches_host(args.remote, "gitlab.com"):
        host, owner, project = split_remote(args.remote, "gitlab.com")
        remote = f"git@{host}:{owner}/{project}.git"
    elif args.sourcehut or matches_host(args.remote, "git.sr.ht"):
        host, owner, project = split_remote(args.remote, "git.sr.ht")
        remote = f"git@{host}:~{owner}/{project}"
    else:
        host, owner, project = split_remote(args.remote, "github.com")
        remote = f"git@{host}:{owner}/{project}.git"

    subprocess.run(
        ["git", "clone", remote, os.path.expanduser(f"~/src/{host}/{owner}/{project}")]
    )


if __name__ == "__main__":
    main()
