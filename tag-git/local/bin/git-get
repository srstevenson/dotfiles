#!/usr/bin/env python3

from __future__ import annotations

import argparse
import subprocess
from dataclasses import dataclass
from pathlib import Path
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from collections.abc import Iterable


@dataclass
class Args(argparse.Namespace):
    url: str = ""


def parse_args() -> Args:
    parser = argparse.ArgumentParser(description="Clone Git repository into ~/dev")
    parser.add_argument("url", help="repository URL")
    return parser.parse_args(namespace=Args())


def matches_hosts(url: str, hosts: Iterable[str]) -> bool:
    return any(
        url.startswith(prefix)
        for host in hosts
        for prefix in (f"https://{host}/", f"git@{host}:")
    )


def unpack_url(url: str) -> tuple[str, str]:
    if "@" in url:
        host, repo = url.split("@", maxsplit=1)[1].split(":", maxsplit=1)
    else:
        host, repo = url.removeprefix("https://").split("/", maxsplit=1)

    return host, repo.lstrip("~").removesuffix(".git")


def main() -> None:
    args = parse_args()

    if matches_hosts(args.url, ["codeberg.org", "github.com", "gitlab.com"]):
        host, repo = unpack_url(args.url)
        if repo.startswith("srstevenson/"):
            url = f"git@{host}:{repo}.git"
        else:
            url = f"https://{host}/{repo}.git"
    elif matches_hosts(args.url, ["git.sr.ht"]):
        host, repo = unpack_url(args.url)
        if repo.startswith("srstevenson/"):
            url = f"git@{host}:~{repo}"
        else:
            url = f"https://{host}/~{repo}"
    else:
        host, repo = unpack_url(args.url)
        url = args.url

    subprocess.run(
        ["git", "clone", url, Path.home().joinpath("dev", host, repo)], check=False
    )


if __name__ == "__main__":
    main()
